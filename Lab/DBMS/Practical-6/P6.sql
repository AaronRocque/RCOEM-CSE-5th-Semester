--------------------------------Querey-1----------------------------------
CREATE OR REPLACE PROCEDURE SHOW_EMPLOYEE
(V_ENO EMPP.EID%TYPE)
AS
V_ENAME EMPP.ENAME%TYPE;
V_HIREDATE EMPP.HIREDATE%TYPE;
V_DESIGNATION EMPP.DESIGNATION%TYPE;
V_SALARY EMPP.SALARY%TYPE;
BEGIN
SELECT ENAME,HIREDATE,DESIGNATION,SALARY INTO
V_ENAME,V_HIREDATE,V_DESIGNATION,V_SALARY
FROM EMPP WHERE EID=V_ENO;
DBMS_OUTPUT.PUT_LINE(V_ENO||' '||V_ENAME||' '||V_HIREDATE||' '||
V_DESIGNATION||' '||V_SALARY);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('EMPP ID DOES NOT EXIST');
END;
/

DECLARE
V_ENO EMPP.EID%TYPE := &EMP_NO;
BEGIN
SHOW_EMPLOYEE(V_ENO);
END;
/

SELECT OBJECT_NAME,OBJECT_TYPE
FROM USER_OBJECTS
WHERE OBJECT_TYPE='PROCEDURE';

SELECT NAME,TEXT FROM USER_SOURCE
WHERE NAME='SHOW_EMPLOYEE';


--------------------------------Querey-2----------------------------------

CREATE OR REPLACE PROCEDURE ADD_EMP
(V_EID EMPP.EID%TYPE,V_ENAME EMPP.ENAME%TYPE,V_HD EMPP.HIREDATE%TYPE,
V_DSG EMPP.DESIGNATION%TYPE,V_SAL EMPP.SALARY%TYPE)
AS
BEGIN
INSERT INTO EMPP VALUES(V_EID,V_ENAME,V_HD,V_DSG,V_SAL);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('INPUT WAS NOT GIVEN PROPERLY');
END;
/

SELECT OBJECT_NAME,OBJECT_TYPE
FROM USER_OBJECTS
WHERE OBJECT_NAME='ADD_EMP';

BEGIN
ADD_EMP(7118,'Aaron Rocque','07-JUL-2020','Teaching Asst.',25000);
ADD_EMP(7119,'Atulya Bharat','03-AUG-2005','Professor',162000);
END;
/

SELECT * FROM EMPP WHERE EID IN(7118,7119);
--------------------------------Querey-3----------------------------------

CREATE OR REPLACE PROCEDURE REMOVE_EMPLOYEE
(V_NAME EMPP.ENAME%TYPE)
AS
BEGIN
DELETE FROM EMPP
WHERE LOWER(ENAME) = V_NAME;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ENTERED NAME NOT FOUND..');
END;
/

EXEC REMOVE_EMPLOYEE('john doe');

EXEC REMOVE_EMPLOYEE('aaron rocque');

SELECT * FROM EMPP
WHERE ENAME = 'Aaron Rocque';

CREATE TABLE ITEMS AS
SELECT P_CODE,DESCRIPT AS DESCR,P_DATE AS IN_DATE,P_MIN AS MIN_QTY,
QTY,P_PRICE AS PRICE,V_CODE FROM PRODUCT;

COLUMN DESCR FORMAT A20
COLUMN MIN_QTY FORMAT 999
COLUMN QTY FORMAT 999
SELECT * FROM ITEMS;

ALTER TABLE ITEMS
ADD CONSTRAINT ITEMS_PK_P_CODE PRIMARY KEY(P_CODE);

SELECT TABLE_NAME,CONSTRAINT_NAME,CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME ='ITEMS';

ALTER TABLE ITEMS
MODIFY(IN_DATE DATE DEFAULT SYSDATE);

ALTER TABLE ITEMS
MODIFY(MIN_QTY NUMBER(3) DEFAULT 2);


--------------------------------Querey-4----------------------------------

CREATE OR REPLACE FUNCTION CHECK_ITEM (ITEM_ID ITEMS.P_CODE%TYPE)
RETURN NUMBER AS
V_CHECK NUMBER;
BEGIN
SELECT COUNT(*) INTO V_CHECK FROM ITEMS WHERE (P_CODE=ITEM_ID);
IF V_CHECK =0 THEN
RETURN 0;
ELSE
RETURN 1;
END IF;
END;
/

DECLARE
V_ITEM_ID ITEMS.P_CODE%TYPE := &VPCODE;
BEGIN
IF(CHECK_ITEM(V_ITEM_ID)=1) THEN
DBMS_OUTPUT.PUT_LINE('RECORD FOUND..');
ELSE
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND..');
END IF;
END;
/
--------------------------------Querey-5----------------------------------

CREATE OR REPLACE PROCEDURE ADD_ITEM
(ITEM_CODE ITEMS.P_CODE%TYPE,ITEM_DESC ITEMS.DESCR%TYPE,
INV_DATE ITEMS.IN_DATE%TYPE,ITEM_QTY ITEMS.QTY%TYPE,
ITEM_MQTY ITEMS.MIN_QTY%TYPE,ITEM_PRICE ITEMS.PRICE%TYPE,
ITEM_VCODE ITEMS.V_CODE%TYPE)
AS
BEGIN
INSERT INTO ITEMS VALUES(ITEM_CODE,ITEM_DESC,INV_DATE,ITEM_MQTY,
ITEM_QTY,ITEM_PRICE,ITEM_VCODE);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ROW WAS NOT INSERTED..');
END;
/

BEGIN
ADD_ITEM('LMNOP','BOOK','25-NOV-2022',10,100,5.5,25443);
END;
/

SELECT * FROM ITEMS
WHERE P_CODE = 'LMNOP';


--------------------------------Querey-6----------------------------------

CREATE OR REPLACE PROCEDURE UPDATE_ITEM
ITEM_CODE ITEMS.P_CODE%TYPE,ITEM_QTY ITEMS.QTY%TYPE,
ITEM_PRICE ITEMS.PRICE%TYPE)
IS
BEGIN
IF CHECK_ITEM(ITEM_CODE)=1 THEN
UPDATE ITEMS SET QTY=ITEM_QTY
WHERE P_CODE = ITEM_CODE;
COMMIT;
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('ITEM NOT FOUND..');
END;
/

EXEC UPDATE_ITEM('AB111',450,61.5);

SELECT * FROM ITEMS
WHERE P_CODE = 'AB111';

--------------------------------Querey-7----------------------------------

CREATE OR REPLACE PROCEDURE UPDATE_ITEM_ADD_WHEN_NOT_FOUND
(ITEM_CODE ITEMS.P_CODE%TYPE,ITEM_QTY ITEMS.QTY%TYPE,
ITEM_PRICE ITEMS.PRICE%TYPE)
AS
BEGIN
IF CHECK_ITEM(ITEM_CODE)=1 THEN
UPDATE ITEMS SET QTY=ITEM_QTY
WHERE P_CODE = ITEM_CODE;
COMMIT;
ELSE
ADD_ITEM(ITEM_CODE,'NEW ITEM...',SYSDATE,ITEM_QTY/8,ITEM_QTY,
ITEM_PRICE,NULL);
END IF;
END;
/

EXEC UPDATE_ITEM_ADD_WHEN_NOT_FOUND('SB725',610,61.5);

SELECT * FROM ITEMS
WHERE P_CODE = 'SB725';

EXEC UPDATE_ITEM_ADD_WHEN_NOT_FOUND('SRC10',60,60);

SELECT * FROM ITEMS
WHERE P_CODE = 'SRC10';


--------------------------------Querey-8---------------------------------

CREATE OR REPLACE PROCEDURE SHOW_ITEM
(ITEM_CODE ITEMS.P_CODE%TYPE)
AS
V_ITEM ITEMS%ROWTYPE;
BEGIN
IF (CHECK_ITEM(ITEM_CODE)=1) THEN
SELECT P_CODE,DESCR,IN_DATE,MIN_QTY,QTY,PRICE,V_CODE INTO
V_ITEM.P_CODE,V_ITEM.DESCR,V_ITEM.IN_DATE,V_ITEM.MIN_QTY,
V_ITEM.QTY,V_ITEM.PRICE,V_ITEM.V_CODE FROM ITEMS
WHERE P_CODE= ITEM_CODE;
DBMS_OUTPUT.PUT_LINE(V_ITEM.P_CODE||' '||V_ITEM.DESCR||' '||V_ITEM.IN_DATE
||' '||V_ITEM.MIN_QTY||' '||V_ITEM.QTY||' '||V_ITEM.PRICE||' '||
V_ITEM.V_CODE);
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('ITEM TO BE UPDATED DOES NOT EXIST IN ITEMS..');
END;
/

EXEC SHOW_ITEM('RF100');

ALTER TABLE ITEMS DROP PRIMARY KEY;

EXEC ADD_ITEM('SPDD1','NEW ITEM-2',SYSDATE,2,150,NULL,25);


--------------------------------Querey-9----------------------------------

CREATE OR REPLACE PROCEDURE SHOW_ITEM_TMR_E(V_P_CODE ITEM.P_CODE%TYPE)
AS
V_DATA ITEM%ROWTYPE;
BEGIN
SELECT * INTO V_DATA
FROM ITEM
WHERE P_CODE = V_P_CODE ;
DBMS_OUTPUT.PUT_LINE(RPAD(V_DATA.P_CODE,8) || RPAD(V_DATA.DESCR,20) || 
RPAD(V_DATA.IN_DATE,8) || RPAD(V_DATA.MIN_QTY,4) ||RPAD(V_DATA.QTY,8) 
||RPAD(V_DATA.PRICE,8) );
EXCEPTION
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE(V_P_CODE ||' MULTIPLE ROWS .........');
END;
/

BEGIN
SHOW_ITEM_TMR_E('HH15P');
SHOW_ITEM_TMR_E('HW15X');
END;
/

--------------------------------Querey-10----------------------------------

CREATE OR REPLACE PROCEDURE SHOW_ITEM_TMR_HANDLED(V_P_CODE ITEM.P_CODE%TYPE)
AS
V_DATA ITEM%ROWTYPE;
BEGIN
SELECT * INTO V_DATA FROM ITEM WHERE P_CODE = V_P_CODE ;
DBMS_OUTPUT.PUT_LINE(RPAD(V_DATA.P_CODE,8) || RPAD(V_DATA.DESCR,20) || 
RPAD(V_DATA.IN_DATE,8) || RPAD(V_DATA.MIN_QTY,4) ||RPAD(V_DATA.QTY,8) 
||RPAD(V_DATA.PRICE,8) );
EXCEPTION
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE(V_P_CODE ||' MULTIPLE ROWS 
....................................................................');
FOR C IN (SELECT * INTO V_DATA FROM ITEM WHERE P_CODE = V_P_CODE )
LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(C.P_CODE,8) || RPAD(C.DESCR,20) || 
RPAD(C.IN_DATE,8) || RPAD(C.MIN_QTY,4) ||RPAD(C.QTY,8) ||RPAD(C.PRICE,8) );
END LOOP;
DBMS_OUTPUT.PUT_LINE('------------------------------------');
END;
/

BEGIN
SHOW_ITEM_TMR_HANDLED('HH15P');
SHOW_ITEM_TMR_HANDLED('HW15X');
END;
/