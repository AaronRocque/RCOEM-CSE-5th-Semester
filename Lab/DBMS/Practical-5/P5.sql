SET PAGESIZE 100;
SET LINESIZE 100;

SELECT * FROM EMPLOYEE; 

SET SERVEROUTPUT ON

------------------------------- QUERY 01 -------------------------------
 
 CREATE TABLE EXAM(
 UROLL NUMBER(4) NOT NULL,
 COURSE VARCHAR2(4) NOT NULL,
 EXAMDT DATE NOT NULL,
 CONSTRAINT EXAM_PK_UROLL PRIMARY KEY(UROLL),
 CONSTRAINT EXAM_CK_UROLL CHECK (UROLL>=1001 AND UROLL<=1099)
 );
 
 SELECT TABLE_NAME,CONSTRAINT_NAME,CONSTRAINT_TYPE,OWNER
 FROM USER_CONSTRAINTS
 WHERE TABLE_NAME='EXAM';

 DESC EXAM
 
 BEGIN
 FOR A IN 1001 .. 1005
 LOOP
 INSERT INTO EXAM(UROLL,COURSE,EXAMDT)
 VALUES (A,'DBMS',SYSDATE-5);
 END LOOP;
 END;
 /
 
 SELECT * FROM EXAM;

------------------------------- QUERY 02 -------------------------------

 CREATE TABLE EMPP AS
 SELECT ENO EID,FNAME||' '||LNAME ENAME,HIREDATE,
 DESIGNATION,SALARY
 FROM EMPLOYEE
 WHERE 1=2;
 
 ALTER TABLE EMPP
 ADD CONSTRAINT EMPP_PK_EID
 PRIMARY KEY(EID);


 DECLARE
 eid EMPLOYEE.ENO%TYPE;
 efname EMPLOYEE.FNAME%TYPE;
 elname EMPLOYEE.LNAME%TYPE;
 ehire_date EMPLOYEE.HIREDATE%TYPE;
 edesignation EMPLOYEE.DESIGNATION%TYPE;
 esalary EMPLOYEE.SALARY%TYPE;
 e_count NUMBER ;
 BEGIN
 SELECT COUNT(*) into e_count FROM EMPLOYEE;
 DBMS_OUTPUT.PUT_LINE(e_count);
 FOR ROW_NUM IN 1..e_count LOOP
 SELECT ENO,FNAME,LNAME,HIREDATE,DESIGNATION,SALARY
 INTO eid,efname,elname,ehire_date,edesignation,esalary
 FROM
 (SELECT
 rownum as rn,ENO,FNAME,LNAME,HIREDATE,DESIGNATION,SALARY
 from employee)
 WHERE rn=ROW_NUM;
 INSERT INTO EMPP(EID,ENAME,HIREDATE,DESIGNATION,SALARY)
 VALUES(eid,efname||' '||elname,
 ehire_date,edesignation,esalary);
 END LOOP;
 END;
 /
 
 SELECT * FROM EMPP;
------------------------------- QUERY 03 -------------------------------

 CREATE TABLE MENTEE 
 AS SELECT SID STAFF_NUMBER,NAME STAFF_NAME,
 FNAME||' '||LNAME STUDENT_NAME,ROLL ROLL_NUMBER,
 REG_DT REG_DATE FROM STAFF,STUDENT WHERE 1=2;

 ALTER TABLE MENTEE 
 ADD CONSTRAINT MENTEE_PK_ROLLSTAFFNO 
 PRIMARY KEY(STAFF_NUMBER,ROLL_NUMBER);
 
  DECLARE
 MENTEE_REC MENTEE%ROWTYPE;
 ROW_COUNT NUMBER;
 BEGIN
 SELECT COUNT(*) INTO ROW_COUNT
 FROM STUDENT
 INNER JOIN
 STAFF
 ON SID=ADVISOR;
 FOR KNT IN 1..ROW_COUNT LOOP
 SELECT ROLL,FNAME||' '||LNAME,REG_DT,SID,NAME
 INTO MENTEE_REC.ROLL_NUMBER,MENTEE_REC.STUDENT_NAME,
 MENTEE_REC.REG_DATE,MENTEE_REC.STAFF_NUMBER,MENTEE_REC.STAFF_NAME
 FROM
 (SELECT ROWNUM AS RN,ROLL,
 FNAME,LNAME,REG_DT,SID,NAME
 FROM
 (
 SELECT ROLL,FNAME,LNAME,REG_DT,SID,NAME
 FROM STUDENT INNER JOIN STAFF ON SID=ADVISOR
 )
 )
 WHERE RN=KNT;
 INSERT INTO MENTEE(
 ROLL_NUMBER,STUDENT_NAME,
 REG_DATE,STAFF_NUMBER,STAFF_NAME)
 VALUES(
 MENTEE_REC.ROLL_NUMBER,MENTEE_REC.STUDENT_NAME,
 MENTEE_REC.REG_DATE,MENTEE_REC.STAFF_NUMBER,
 MENTEE_REC.STAFF_NAME);
 END LOOP;
 END;
 /

SELECT COUNT(*) FROM MENTEE;

------------------------------- QUERY 04 -------------------------------

BEGIN
 DBMS_OUTPUT.PUT_LINE(LPAD('STAFF_NUMBER',7)||' '
 ||RPAD('STAFF_NAME',20)||' '
 ||RPAD('STUDENT_NAME',20)||' '
 ||LPAD('ROLL_NUMBER',4)||' '
 ||RPAD('REG_DATE',8)
 );
 DBMS_OUTPUT.PUT_LINE('-------'||' '
 ||'--------------------'||' '
 ||'--------------------'||' '
 ||'----'||' '
 ||'--------'
 );
 FOR T IN (SELECT * FROM MENTEE) LOOP
 DBMS_OUTPUT.PUT_LINE(RPAD(T.STAFF_NUMBER,7)||' '
 ||RPAD(T.STAFF_NAME,20)||' '
 ||RPAD(T.STUDENT_NAME,20)||' '
 ||LPAD(T.ROLL_NUMBER,4)||' '
 ||RPAD(T.REG_DATE,8)
 );
 END LOOP;
 END;
 /
 
------------------------------- QUERY 05 -------------------------------

 DECLARE
 SYSDT DATE;
 BEGIN
 SELECT SYSDATE INTO SYSDT
 FROM DUAL;
 DBMS_OUTPUT.PUT_LINE('SYSTEM DATE IS '||SYSDT||' ');
 EXCEPTION
 WHEN VALUE_ERROR THEN
 DBMS_OUTPUT.PUT_LINE('Variable holding the system date is large 
 enough in size.');
 END;
 /

------------------------------- QUERY 06 -------------------------------

 DECLARE
 EMP_ROW EMPLOYEE%ROWTYPE;
 E_NO NUMBER;
 BEGIN
 E_NO:='&EMPLOYEE_NUMBER';
 SELECT * INTO EMP_ROW
 FROM EMPLOYEE WHERE
 EXTRACT(YEAR FROM (SELECT SYSDATE FROM DUAL))-
 EXTRACT(YEAR FROM HIREDATE)>=12 AND ENO=E_NO;
 DBMS_OUTPUT.PUT_LINE('EMPLOYEE '||EMP_ROW.ENO||' '||EMP_ROW.FNAME||' '
 ||EMP_ROW.LNAME||' IS ELIGIBLE FOR LONGITIVITY BONUS');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('EMPLOYEE '||' IS NOT ELIGIBLE FOR 
 LONGITIVITY BONUS');
 END;
 /
 
 DECLARE
 EMP_ROW EMPLOYEE%ROWTYPE;
 E_NO NUMBER;
 BEGIN
 E_NO:='&EMPLOYEE_NUMBER';
 SELECT * INTO EMP_ROW
 FROM EMPLOYEE WHERE
 EXTRACT(YEAR FROM (SELECT SYSDATE FROM DUAL))-
 EXTRACT(YEAR FROM HIREDATE)>=10 AND ENO=E_NO;
 DBMS_OUTPUT.PUT_LINE('EMPLOYEE '||EMP_ROW.ENO||' '||EMP_ROW.FNAME||' '
 ||EMP_ROW.LNAME||' IS ELIGIBLE FOR LONGITIVITY BONUS');
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('EMPLOYEE '||' IS NOT ELIGIBLE FOR 
 LONGITIVITY BONUS');
 END;
 /
------------------------------- QUERY 07 -------------------------------

DECLARE
 EMP_ROW EMPLOYEE%ROWTYPE;
 BEGIN
 FOR EMP_ROW IN (SELECT * FROM EMPLOYEE)
 LOOP
 IF EXTRACT(MONTH FROM EMP_ROW.BIRTHDATE)=8 THEN
 DBMS_OUTPUT.PUT_LINE(EMP_ROW.ENO||' '||EMP_ROW.FNAME
 ||' '||EMP_ROW.LNAME);
 END IF;
 EXIT WHEN EXTRACT(MONTH FROM EMP_ROW.BIRTHDATE)=8;
 END LOOP;
 END;
 /

 DECLARE
 EMP_ROW EMPLOYEE%ROWTYPE;
 BEGIN
 FOR EMP_ROW IN (SELECT * FROM EMPLOYEE
 ORDER BY ENO DESC)
 LOOP
 IF EXTRACT(MONTH FROM EMP_ROW.BIRTHDATE)=8 THEN
 DBMS_OUTPUT.PUT_LINE(EMP_ROW.ENO||' '||EMP_ROW.FNAME||' 
'||EMP_ROW.LNAME);
 END IF;
 EXIT WHEN EXTRACT(MONTH FROM EMP_ROW.BIRTHDATE)=8;
 END LOOP;
 END;
 /

------------------------------- QUERY 08 -------------------------------

DECLARE
 STAFF_ROW STAFF%ROWTYPE;
 ID NUMBER;
 BEGIN
 ID:='&STAFF_ID';
 SELECT * INTO STAFF_ROW
 FROM STAFF WHERE
 SID=ID;
 DBMS_OUTPUT.PUT_LINE(STAFF_ROW.SID||' '||STAFF_ROW.NAME||' '||
 STAFF_ROW.BRANCH||' '||STAFF_ROW.DESG||' '||STAFF_ROW.JOIN_DT);
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND');
 END;
 /
 
------------------------------- QUERY 09 -------------------------------

 CREATE TABLE PAYSCALE
 ( DESIGNATION VARCHAR2(15),
 MINPAY NUMBER(6),
 MAXPAY NUMBER(6),
 CONSTRAINT PAYSCALE_CK_DESIG CHECK (DESIGNATION IN
 ('Professor','Research Asst.','Asso. Professor','Teaching Asst.'
 ,'Asst. Professor')),
 CONSTRAINT PAYSCALE_PK_DESIG PRIMARY KEY (DESIGNATION)
 );
 
  INSERT INTO PAYSCALE(DESIGNATION,MINPAY,MAXPAY) VALUES
 ('Professor',140000,200000);

 INSERT INTO PAYSCALE(DESIGNATION,MINPAY,MAXPAY) VALUES
 ('Asso. Professor',100000,140000);
 
  INSERT INTO PAYSCALE(DESIGNATION,MINPAY,MAXPAY) VALUES
 ('Asst. Professor',50000,90000);
 
  INSERT INTO PAYSCALE(DESIGNATION,MINPAY,MAXPAY) VALUES
 ('Teaching Asst.',20000,32500);

 INSERT INTO PAYSCALE(DESIGNATION,MINPAY,MAXPAY) VALUES
 ('Research Asst.',30000,45000);

DECLARE
 ENO_INP EMPLOYEE.ENO%TYPE;
 P_MINPAY PAYSCALE.MINPAY%TYPE;
 E_SAL EMPLOYEE.SALARY%TYPE;
 BELOW_PAY_RANGE EXCEPTION;
 ABOVE_PAY_RANGE EXCEPTION;
 P_MAXPAY PAYSCALE.MAXPAY%TYPE;
 BEGIN
 ENO_INP:='&EMPLOYEE_NUMBER';
 SELECT EMPLOYEE.SALARY,PAYSCALE.MINPAY,PAYSCALE.MAXPAY
 INTO E_SAL,P_MINPAY,P_MAXPAY
 FROM EMPLOYEE INNER JOIN PAYSCALE
 USING (DESIGNATION)
 WHERE EMPLOYEE.ENO=ENO_INP;
 IF E_SAL>P_MAXPAY THEN
 RAISE ABOVE_PAY_RANGE;
 ELSIF E_SAL<P_MINPAY THEN
 RAISE BELOW_PAY_RANGE;
 ELSE
 DBMS_OUTPUT.PUT_LINE('EMPLOYEE'||ENO_INP||' HAS A SALARY WITHIN PAY 
RANGE');
 END IF;
 EXCEPTION
 WHEN BELOW_PAY_RANGE THEN
 DBMS_OUTPUT.PUT_LINE(ENO_INP||' RECEIVES SALARY BELOW SCALE 
'||'['||P_MINPAY||','
 ||P_MAXPAY||']');
 WHEN ABOVE_PAY_RANGE THEN
 DBMS_OUTPUT.PUT_LINE(ENO_INP||' RECEIVES SALARY ABOVE SCALE 
'||'['||P_MINPAY||','
 ||P_MAXPAY||']');
 END;
 /
------------------------------- QUERY 10 -------------------------------

DECLARE
 EMP_NO EMPLOYEE.ENO%TYPE;
 EMP_SAL EMPLOYEE.SALARY%TYPE;
 MIN_PAY PAYSCALE.MINPAY%TYPE;
 MAX_PAY PAYSCALE.MAXPAY%TYPE;
 ABOVE_PAY_RANGE EXCEPTION;
 BELOW_PAY_RANGE EXCEPTION;
 BEGIN
 FOR I IN (SELECT EMPLOYEE.SALARY AS EMP_SAL,EMPLOYEE.ENO AS EMP_NO,
 PAYSCALE.MINPAY AS MIN_PAY,PAYSCALE.MAXPAY AS MAX_PAY
 FROM EMPLOYEE NATURAL JOIN PAYSCALE)
 LOOP
 
 BEGIN
 IF I.EMP_SAL > I.MAX_PAY THEN
 RAISE ABOVE_PAY_RANGE;
 ELSIF I.EMP_SAL < I.MIN_PAY THEN
 RAISE BELOW_PAY_RANGE;
 ELSE
 DBMS_OUTPUT.PUT_LINE(' ');
 END IF;
 EXCEPTION
 WHEN ABOVE_PAY_RANGE THEN
 DBMS_OUTPUT.PUT_LINE(I.EMP_NO||' Receives 
Salary Above Scale '||'['||I.MIN_PAY||','||
I.MAX_PAY||']'
 );
 WHEN BELOW_PAY_RANGE THEN
 DBMS_OUTPUT.PUT_LINE(I.EMP_NO||' Receives 
Salary Below Scale '||'['||I.MIN_PAY||','||
I.MAX_PAY||']'
 );
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
 END;
 END LOOP;
 END;
 /
