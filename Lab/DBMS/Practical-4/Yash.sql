DROP TABLE INV_CUSTOMER;
DROP TABLE PART;
DROP VIEW INV_CUSTOMER_VW;

--query 1

CREATE TABLE PART 
  AS SELECT P_CODE AS PT_CODE, DESCRIPT AS PT_DESC, P_PRICE AS PT_PRICE, V_CODE
  FROM PRODUCT
  WHERE 1=2;

ALTER TABLE PART 
  ADD CONSTRAINT PART_PK PRIMARY KEY(PT_CODE);

INSERT INTO PART 
  (SELECT P_CODE, DESCRIPT, P_PRICE, V_CODE FROM PRODUCT); 

DESC PART;
DESC PRODUCT;


SELECT TABLE_NAME, CONSTRAINT_NAME
  FROM USER_CONSTRAINTS 
  WHERE TABLE_NAME IN ('PART', 'PRODUCT');


--query 2

-- SELECT DISTINCT V_CODE, V_NAME, P.QTY
--   FROM VENDOR V
--   JOIN PRODUCT P USING(V_CODE)
--   WHERE P.QTY>10;

SELECT DISTINCT V.V_CODE, V.V_NAME
  FROM VENDOR V
  INNER JOIN PRODUCT P ON V.V_CODE = P.V_CODE
  WHERE P.QTY>10
  ORDER BY V.V_NAME;

-- SELECT V_CODE, V_NAME FROM VENDOR
--   WHERE V_CODE IN(
--     SELECT V_CODE
--       FROM PRODUCT 
--       WHERE V_CODE IS NOT NULL AND
--       QTY>10
--     );

--query 3
SELECT P_CODE, P_PRICE FROM PRODUCT P
  WHERE P_CODE IN(
  SELECT PT_CODE FROM PART WHERE PT_PRICE IN(
    SELECT MAX(PT_PRICE ) FROM PART UNION
    SELECT MIN(PT_PRICE ) FROM PART)
  );

--inventory
SELECT P_CODE, P_PRICE, P_PRICE*QTY AS INV_VAL FROM PRODUCT P
  WHERE P_CODE IN(
  SELECT PT_CODE FROM PART PT WHERE (PT.PT_PRICE * P.QTY) IN(
    SELECT MAX(PT.PT_PRICE * P.QTY) FROM PART PT UNION
    SELECT MIN(PT.PT_PRICE * P.QTY) FROM PART PT)
  )
  ORDER BY P_PRICE DESC;


--query 4

COLUMN DESCRIPT FORMAT A12;

SELECT * FROM PRODUCT
 WHERE P_PRICE >
 (SELECT AVG(P_PRICE) FROM
 PRODUCT)
ORDER BY P_PRICE DESC;

SELECT V.V_CODE,V.V_NAME,COUNT(P_CODE)
FROM VENDOR V,PRODUCT
WHERE V.V_CODE = PRODUCT.V_CODE
GROUP BY V.V_CODE,V.V_NAME;

--query 5 
SELECT V_CODE, COUNT(P_CODE) COUNT, AVG(P_PRICE) AVERAGE_PRICE
FROM PRODUCT
GROUP BY V_CODE
HAVING AVG(P_PRICE)<10;

SELECT V_CODE,SUM(P_PRICE * QTY) TOT_COST
FROM PRODUCT
WHERE V_CODE IS NOT NULL
GROUP BY V_CODE
HAVING SUM(P_PRICE*QTY)>400;


--query 6
CREATE OR REPLACE VIEW PRODUCT_STATS AS
SELECT V_CODE,SUM(P_PRICE) TOT_COST, MAX(QTY) MX_QTY,MIN(QTY) MN_QTY,AVG(QTY) AV_QTY
FROM PRODUCT
WHERE V_CODE IS NOT NULL
GROUP BY V_CODE;


SELECT * FROM PRODUCT_STATS;

--query 7
SELECT C_CODE,SUM(L_UNITS*L_PRICE) PURCHASE,BALANCE FROM INVOICE
  NATURAL JOIN LINE NATURAL JOIN CUSTOMER
  GROUP BY C_CODE,BALANCE;

--query 8
SELECT C_CODE,SUM(L_UNITS) TOT_UNITS FROM INVOICE
  NATURAL JOIN LINE NATURAL JOIN CUSTOMER
  GROUP BY C_CODE
  ORDER BY C_CODE;

--query 9
SELECT INV_NUM,C_CODE,SUM(L_PRICE)
  FROM INVOICE NATURAL JOIN LINE
  GROUP BY C_CODE,INV_NUM;

SELECT COUNT(INV_NUM) INV_TOT, C_CODE, SUM(L_PRICE) SUM
FROM INVOICE NATURAL JOIN LINE
GROUP BY C_CODE
ORDER BY C_CODE;


--query 10
SELECT C_CODE, BALANCE
FROM CUSTOMER WHERE C_CODE IN (
SELECT C_CODE FROM CUSTOMER
MINUS
SELECT C_CODE FROM INVOICE)
GROUP BY C_CODE, BALANCE;


SELECT MAX(BALANCE) MX_BAL,MIN(BALANCE) MN_BAL,AVG(BALANCE) AV_BAL
FROM CUSTOMER WHERE C_CODE IN (
SELECT C_CODE FROM CUSTOMER
MINUS
SELECT C_CODE FROM INVOICE);


--query 11
CREATE TABLE INV_CUSTOMER AS
  SELECT I.INV_NUM AS QUOTE_ID,  
         I.INV_DATE AS QUOTE_DT,
         C.FNAME ||' '||C.LNAME AS CNAME 
         FROM INVOICE I
          JOIN CUSTOMER C
          USING(C_CODE)
          WHERE 1=2;  

ALTER TABLE INV_CUSTOMER
ADD PRIMARY KEY (QUOTE_ID);


INSERT INTO INV_CUSTOMER 
  ( SELECT I.INV_NUM AS QUOTE_ID,  
         I.INV_DATE AS QUOTE_DT,
         C.FNAME ||' '||C.LNAME AS CNAME 
         FROM INVOICE I
          JOIN CUSTOMER C
          USING(C_CODE)); 

--query 12

CREATE OR REPLACE VIEW INV_CUSTOMER_VW AS
   SELECT I.INV_NUM AS QUOTE_ID,  
         I.INV_DATE AS QUOTE_DT,
         C.FNAME ||' '||C.LNAME AS CNAME 
         FROM INVOICE I
          JOIN CUSTOMER C
          USING(C_CODE)
          WHERE 1=2;

INSERT INTO INV_CUSTOMER_VW
  ( SELECT I.INV_NUM AS QUOTE_ID,  
         I.INV_DATE AS QUOTE_DT,
         C.FNAME ||' '||C.LNAME AS CNAME 
         FROM INVOICE I
          JOIN CUSTOMER C
          USING(C_CODE)); 

DROP VIEW INV_CUSTOMER_VW;


CREATE OR REPLACE VIEW INV_CUSTOMER_VW AS
   SELECT I.INV_NUM AS QUOTE_ID,  
         I.INV_DATE AS QUOTE_DT,
         C.FNAME ||' '||C.LNAME AS CNAME 
         FROM INVOICE I
          JOIN CUSTOMER C
          USING(C_CODE);

SELECT * FROM INV_CUSTOMER_VW;

INSERT INTO INV_CUSTOMER_VW VALUES(1011, '12-Mar-2020','Jagat Narayan');

DELETE FROM PRODUCT WHERE P_CODE IN ('SH200','ZZ999','AB212');

INSERT INTO PRODUCT VALUES('SH200', 'Sledge hammer', '05-Jul-2020', 10,3,25.8,0,24992);

INSERT INTO PRODUCT VALUES('ZZ999', 'Cordless Drill', '10-Jul-2020', 200,40,25.5,0,24992);

INSERT INTO PRODUCT VALUES('AB212', 'Power Drill', '03-Aug-2020', 15, 3, 275.0, 0,NULL);

SELECT * FROM PRODUCT WHERE P_CODE IN ('SH200','ZZ999','AB212');

--query 13
SELECT V_CODE, V_NAME FROM VENDOR WHERE V_CODE IN (
  SELECT DISTINCT V_CODE FROM PRODUCT  
);


--query 14
SELECT AVG(P_PRICE)
FROM PRODUCT;

SELECT DESCRIPT,COUNT(DESCRIPT) COUNT,AVG(P_PRICE) AVG_PRICE
 FROM PRODUCT
 GROUP BY DESCRIPT;

SELECT DESCRIPT,
AVG(P_PRICE)
FROM PRODUCT
GROUP BY DESCRIPT;

--query 15

SELECT P_CODE, DESCRIPT, P_PRICE 
  FROM PRODUCT 
  WHERE P_PRICE >= (
    SELECT AVG(P_PRICE) 
      FROM PRODUCT);

--query 16
SELECT V_CODE,V_NAME,V_CONTACT
 FROM VENDOR WHERE V_CODE IN(
 SELECT V_CODE FROM VENDOR
 MINUS
 SELECT V_CODE FROM PRODUCT);

--query 17
UPDATE PRODUCT SET P_PRICE=(SELECT AVG(P_PRICE) FROM PRODUCT)
  WHERE V_CODE IN(
    SELECT V_CODE FROM VENDOR 
      WHERE V_STATE NOT IN ('TN', 'KY'));

INSERT INTO LINE VALUES(1003,4,'ZZ999',10,25.5);

SELECT COUNT(*) FROM LINE;

--query 18

SELECT C_CODE,FNAME,LNAME FROM CUSTOMER
  WHERE C_CODE IN(
    SELECT C_CODE FROM INVOICE
    WHERE INV_NUM IN(
      SELECT INV_NUM FROM LINE
        WHERE P_CODE IN (
          SELECT P_CODE FROM PRODUCT
          WHERE LOWER(DESCRIPT) LIKE '%blade')
        )
   );


SELECT C_CODE,FNAME,LNAME
  FROM CUSTOMER
  WHERE C_CODE IN(
    SELECT C_CODE FROM INVOICE
      WHERE INV_NUM IN(
        SELECT INV_NUM FROM LINE
        WHERE P_CODE IN(
          SELECT PT_CODE FROM PART
            WHERE LOWER(PT_DESC) LIKE '%power drill'
        )
      )
  );


--query 19

SELECT C_CODE,FNAME,LNAME
  FROM CUSTOMER
  WHERE C_CODE IN(
    SELECT C_CODE FROM INVOICE
    WHERE INV_NUM IN (
      SELECT INV_NUM FROM LINE
      WHERE P_CODE IN(
        SELECT P_CODE FROM PRODUCT
        WHERE UPPER(DESCRIPT) LIKE '%HAMMER' OR
        UPPER(DESCRIPT) LIKE '%DRILL' OR
        UPPER(DESCRIPT) LIKE '%SAW%'
      )
    )
  );


--query 20

SELECT * FROM PRODUCT WHERE P_CODE IN (
 SELECT P_CODE FROM (
 SELECT P_CODE,SUM(L_UNITS) 
 FROM LINE 
 GROUP BY P_CODE
 HAVING SUM(L_UNITS)>AVG(L_UNITS)
 )
);

--query 21

SELECT C_CODE,FNAME,LNAME FROM CUSTOMER NATURAL JOIN INVOICE
 WHERE INV_NUM IN(
 SELECT INV_NUM FROM LINE
 WHERE P_CODE IN ('HC100','JB012')
 );

--query 22

SELECT P_CODE,P_PRICE,(
  P_PRICE-(
    SELECT AVG(P_PRICE) 
    FROM PRODUCT)
  ) DIFF,
  (SELECT AVG(P_PRICE) FROM PRODUCT) AVERAGE 
  FROM PRODUCT;

--query 23

SELECT P_CODE, SUM(L_UNITS) FROM LINE L
 GROUP BY P_CODE
 HAVING SUM(L.L_UNITS)>(
  SELECT AVG(L_UNITS) FROM LINE LA 
  WHERE LA.P_CODE=L.P_CODE);

--query 24

SELECT * FROM CUSTOMER C
  WHERE EXISTS(
  SELECT * FROM INVOICE I
    WHERE I.C_CODE=C.C_CODE
  );