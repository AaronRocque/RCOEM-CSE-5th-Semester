/*

Active DBS

ECA:
E - Eevnt
C - Condidtion
A - Action

Triggers: 
	Applicable on point of activation.
	You can enable and disable them
	
ACL - Active Control List 
	Part of Network and Security

Geospacial Access - Space Restrication
Temperal Access - Time Restrication

Trigger Name - UNIQUE
Timing - Depends on control events ie before or AFTER
Triggering Event - Event that fires the trigger, its a DML STATEMENT
Filtering Condtion - Will be all by DEFAULT
Target - Either View or TABLE
Trigger Parameters - Used to denote the record columns. Precedes with a colon (:new, :old)
Trigger Action - Placed within begin and end block

When you drop a table:
	Synonyms are not dropped
	Views are not dropped
	
			
*/

start C:\Users\AaronRocque\Documents\V_Semester\Lab\DBMS\Practical-7\TRGDEMO

select count(*) from empl;

show USER

COLUMN EMPNO HEA 'ENO' FORMAT 9999
COLUMN MGR FORMAT 9999
COLUMN SAL HEA 'SAL' FORMAT 9999
COLUMN COMM HEA 'COMM' FORMAT 9999
COLUMN DEPTNO HEA 'DNO' FORMAT 999999
COLUMN ENAME HEA 'NAME' FORMAT A7
SET PAGES 30

SELECT EMPNO, SAL, COMM FROM EMPL;

--HEA = HEADER

-- STATEMENT LEVEL TRIGGER
--------------------------

CREATE TABLE PAY_HIKE (
	STATUS VARCHAR2(6) NOT NULL,
	WEF DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE IND_HIKE (
	EMPNO NUMBER(4) NOT NULL,
	STATUS VARCHAR(6) NOT NULL,
	WEF DATE DEFAULT SYSDATE NOT NULL
);

CREATE OR REPLACE TRIGGER SALARY_INCREASE_TRG
	BEFORE UPDATE OF SAL ON EMPL
BEGIN
	INSERT INTO PAY_HIKE	
		VALUES ('YES', SYSDATE);
END;
/

SELECT OBJECT_NAME FROM USER_OBJECTS 
	WHERE OBJECT_TYPE = 'TRIGGER';
	
COLUMN TEXT FOR A70

SELECT LINE, TEXT FROM USER_SOURCE 
	WHERE NAME = 'SALARY_INCREASE_TRG';
	
-- Line, Text, Type, Name are in SOURCE

SELECT EMPNO, SAL FROM EMPL;

SELECT * FROM PAY_HIKE;

UPDATE EMPL SET SAL = SAL + 100;

SELECT * FROM PAY_HIKE;

ROLLBACK;

SELECT * FROM PAY_HIKE;

-- ROW LEVEL TRIGGER
--------------------

CREATE OR REPLACE TRIGGER SALARY_INCREASE_TRG
	BEFORE UPDATE OF SAL ON EMPL
	FOR EACH ROW
BEGIN
	INSERT INTO IND_HIKE	
		VALUES (:OLD.EMPNO, 'yes', SYSDATE);
END;
/

UPDATE EMPL SET SAL = SAL + 100
	WHERE SAL < 1500;

SELECT * FROM IND_HIKE;

SELECT * FROM PAY_HIKE;

ALTER TRIGGER SALARY_INCREASE_TRG DISABLE;

UPDATE EMPL SET SAL = SAL + 50
	WHERE SAL < 1500;
	
UPDATE EMPL SET SAL = SAL - 150
	WHERE SAL < 1500;
	
DELETE FROM IND_HIKE;

DELETE FROM PAY_HIKE;

UPDATE EMPL SET SAL = SAL - 150
	WHERE SAL < 1650;
	
CREATE OR REPLACE TRIGGER STOP_USAGE_TRG
	BEFORE DELETE OR INSERT OR UPDATE ON EMPL
BEGIN 
	IF (TO_CHAR(SYSDATE, 'DAY') IN ('SAT', 'SUN')) OR (TO_CHAR(SYSDATE, 'HH:MI')
		NOT BETWEEN '09:00' AND '17:00')
	THEN
		RAISE_APPLICATION_ERROR(-20502, 'RESTRICTED ACCSS TO ORG DATA');
	END IF;
END;
/

ALTER TABLE EMPL ENABLE ALL TRIGGERS;

UPDATE EMPL SET SAL = SAL + 200
	WHERE SAL < 1000;
	
CREATE OR REPLACE TRIGGER STOP_USAGE_TRG
	BEFORE DELETE OR INSERT OR UPDATE ON EMPL
BEGIN 
	IF (TO_CHAR(SYSDATE, 'DAY') IN ('SAT', 'SUN', 'TUE')) OR (TO_CHAR(SYSDATE, 'HH:MI')
		NOT BETWEEN '09:00' AND '17:00')
	THEN
		RAISE_APPLICATION_ERROR(-20502, 'RESTRICTED ACCSS TO ORG DATA');
	END IF;
END;
/
	
UPDATE EMPL SET SAL = SAL + 200;

DESC EMPL;

-- Allow 1% commission

ALTER TABLE EMPL 
	ADD
	SALES NUMBER(6) DEFAULT 0;
--ERROR

CREATE OR REPLACE TRIGGER GET_COMMISON_TRG
	BEFORE UPDATE OF SALES ON EMPL
	FOR EACH ROW
	WHEN (LOWER(NEW.JOB) = 'salesman')
BEGIN 
	: NEW.COMM := OLD.COMM + :NEW.SALES/100;
END;
/
-- Error cause no SALES

SELECT EMPNO, COMM, SALES FROM EMPL;
-- Error cause no SALES

SELECT JOB FROM EMPL;

CREATE TABLE DELETED_EMPLOYEE (
	EMPNO NUMBER(4) NOT NULL,
	FIRED DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE NEWW_EMPLOYEE (
	EMPNO NUMBER(4) NOT NULL,
	HIRED DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE SALARY_UPDATE (
	EMPNO NUMBER(4) NOT NULL,
	NEWSAL NUMBER(6) NOT NULL,
	OLDSAL NUMBER(6) NOT NULL,
	CHANGED DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE JOB_UPDATE (
	EMPNO NUMBER(4) NOT NULL,
	NEWJOB NUMBER(9) NOT NULL,
	OLDJOB NUMBER(9) NOT NULL,
	CHANGED DATE DEFAULT SYSDATE NOT NULL
);

-- TRACK DML
------------

CREATE OR REPLACE TRIGGER TRACK_DML_TRG
	AFTER DELETE OR INSERT OR UPDATE ON EMPL
	FOR EACH ROW
BEGIN 
	IF DELETING THEN
		INSERT INTO DELETED_EMPLOYEE(EMPNO, FIRED) VALUES (:OLD.EMPNO, SYSDATE);
	ELSIF INSERTING INTO THEN
		INSERT NEWW_EMPLOYEE(EMPNO, HIRED) VALUES (:NEW.EMPNO, SYSDATE);
	ELSIF UPDATING('SAL') THEN 
		INSERT INTO SALARY_UPDATE(EMPNO, NEWSAL, OLDSAL, CHANGED)
			VALUES (:OLD.EMPNO, :NEW.SAL, :OLD.SAL, SYSDATE);
	ELSE 
     INSERT INTO JOB_UPDATE(EMPNO, NEWJOB, OLDJOB, CHANGED)
          VALUES(:OLD.EMPNO, :NEW.JOB, :OLD.JOB, SYSDATE);
ENDÂ IF;
END;
/
